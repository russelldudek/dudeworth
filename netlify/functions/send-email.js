require('dotenv').config();
const nodemailer = require('nodemailer');

exports.handler = async (event, context) => {
    console.log('Event received:', event);

    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            body: JSON.stringify({ error: 'Method not allowed' }),
        };
    }

    let data;
    try {
        // Check if content type is JSON
        if (event.headers['content-type'] === 'application/json') {
            data = JSON.parse(event.body);
        } else {
            // If content type is form-urlencoded
            const params = new URLSearchParams(event.body);
            data = Object.fromEntries(params);
        }
    } catch (error) {
        console.error('Error parsing input data:', error);
        return {
            statusCode: 400,
            body: JSON.stringify({ error: 'Invalid input data' }),
        };
    }

    const { firstName, lastName, email, budget, timeframe, message } = data;

    console.log('Parsed form data:', { firstName, lastName, email, budget, timeframe, message });

    let transporter = nodemailer.createTransport({
        service: 'Gmail',
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS,
        },
    });

    let mailOptions = {
        from: process.env.EMAIL_USER,
        to: 'duder@dudeworth.com',
        subject: 'New Contact Form Submission: Weâ€™ve Got Data!',
        text: `Greetings, Human Operators of DudeWorth,

An intelligent entity (a potential client) has interfaced with our system and submitted a new contact form. Here are the deets:

---

**First Name:** ${firstName}

**Last Name:** ${lastName}

**Email:** ${email}

**Budget:** ${budget}

**Time Frame:** ${timeframe}

**Message:**
${message}

---

This data packet needs your human touch. Engage with the sender at your earliest convenience to optimize their experience.

Best regards,
Your Friendly AI at DudeWorth

---

**Note:** This message was generated by our infallible AI. Please do not reply directly to this email.`,
    };

    try {
        console.log('Attempting to send email...');
        await transporter.sendMail(mailOptions);
        console.log('Email sent successfully');
        
        return {
            statusCode: 200,
            body: JSON.stringify({ message: 'Email sent successfully!' }),
        };
    } catch (error) {
        console.error('Error sending email:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Failed to send email' }),
        };
    }
};

